(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.insert2 = global.insert2 || {})));
}(this, function (exports) { 'use strict';

  function insert() {
    var html = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _ref$string = _ref.string;
    var string = _ref$string === undefined ? '' : _ref$string;
    var _ref$el = _ref.el;
    var el = _ref$el === undefined ? 'body' : _ref$el;
    var _ref$type = _ref.type;
    var type = _ref$type === undefined ? 'append' : _ref$type;

    if (type === 'append') {
      return html.replace(new RegExp('</' + el + '>'), string + '$&');
    }

    // any case other than append
    // a.k.a. prepend
    return html.replace(new RegExp('<' + el + '[^>]*>'), '$&' + string);
  }

  function insertMulti() {
    var html = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    var arr = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    var result = html;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var option = _step.value;

        result = insert(result, option);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  }

  exports['default'] = insert;
  exports.insertMulti = insertMulti;

  Object.defineProperty(exports, '__esModule', { value: true });

}));